% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fitSineNL.R
\name{fitSineNL}
\alias{fitSineNL}
\title{Fit a nonlinear sine wave function}
\usage{
fitSineNL(
  obsC = NULL,
  a = c(0, 10),
  phi = c(0, 2 * pi),
  k = c(-20, 0),
  t = NULL,
  nIter = 50000,
  nBestIter = 30,
  weight = rep(1, length(obsC))
)
}
\arguments{
\item{obsC}{A numeric vectors containing values of the dependent variables, this
could be measure isotope concentration in precipitation (or streamflow).}

\item{a}{A numeric vector with positive numbers, representing the maximum and
minimum search range for the amplitude A of cycle of isotope concentrations
in precipitation (or streamflow).}

\item{phi}{A numeric vector, representing the maximum and minimum search range
for the phase shift of isotope concentrations in precipitation (or
streamflow). The range must be within [0, 2*pi].}

\item{k}{A numeric vector, representing the maximum and minimum search range
for the phase shift of the constant value in the fitted function.}

\item{t}{A date (or character) vector in format format yyyy-mm-dd
(e.g., 2020-12-31) representing the date of observed isotope concentrations}

\item{nIter}{Maximum number of iterations (number of parametersets), higher
number higher chance to have a better fit with observed data, however, longer
computation time, defaut is 50000 (takes around 1 minute with example data)}

\item{nBestIter}{Number of best parameter sets. For example, when running with
50000 parameter sets, the function will rank which parameter set give a better
fit with observed based on square error, then save all outputs from nBestIter.}

\item{weight}{A weight vector (same length with obsC) when user wants to weight
with streamflow or precipitation (to have the weighted Fyw). Otherwise, if no
input is given, all of the weight is 1 (meaning equal weight/unweight - this
case for calculating the unweighted Fyw).}
}
\value{
A list of object
}
\description{
Fit a nonlinear sine wave function
}
\details{
Fitting non linear sine function of the following form: \cr
y = a * sin(2 * pi * t + phi) + k
}
\examples{
#Get isotope data in streamflow of the Alp catchment (from the example dataset)
isotopeS_Alp <- subset(isotopeData, catchment == "Alp" & variable == "streamflow")

# Not to sine wave to observed isotope in streamflow
fitSineS <- fitSineNL(obsC = isotopeS_Alp$delta_18O,
                      a = c(0,10),
                      phi = c(0, 2*pi),
                      k = c(-20,0),
                      t = isotopeS_Alp$date,
                      nIter = 5000,
                      nBestIter = 2,
                      weight = isotopeS_Alp$water_flux_mm)
}
\seealso{
toDecimal, randomLHS
}
